{"version":3,"sources":["components/footer/index.tsx","components/header/index.tsx","components/button/index.tsx","components/halfButton/index.tsx","pages/main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","Header","Button","content","color","style","backgroundColor","HalfButton","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAiBeA,G,gBAdA,WACX,OACI,yBAAKC,UAAU,UACX,4BACI,wDACA,yDACA,yDACA,wDACA,sDCADC,G,MARA,WACX,OACI,yBAAKD,UAAU,UAAf,gDCKOE,G,MAPA,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,MACvB,OACI,yBAAKJ,UAAU,SAASK,MAAOD,GAAS,CAAEE,gBAAgB,GAAD,OAAKF,KACzDD,KCKEI,G,MARI,SAAC,GAA4D,IAA1DJ,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,MAC3B,OACI,yBAAKJ,UAAU,aAAaK,MAAO,CAACC,gBAAgB,GAAD,OAAKF,KACnDD,KC4BEK,G,MA3BF,WACT,OACI,yBAAKR,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAQG,QAAQ,mEAChB,yBAAKH,UAAU,aACX,kBAAC,EAAD,CAAYG,QAAO,4DAAuBC,MAAM,cAChD,kBAAC,EAAD,CAAYD,QAAO,iFAAwBC,MAAM,UAErD,kBAAC,EAAD,CAAQD,QAAQ,sDAChB,kBAAC,EAAD,CAAQA,QAAQ,8DAChB,yBAAKH,UAAU,aACX,kBAAC,EAAD,CAAYG,QAAO,uFAAyBC,MAAM,WAClD,kBAAC,EAAD,CAAYD,QAAO,qEAAgCC,MAAM,WAE7D,kBAAC,EAAD,CAAQD,QAAQ,sBAAsBC,MAAM,WAEhD,kBAAC,EAAD,SCbGK,EARH,WACV,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f6dbcb3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./footer.scss\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <ul>\r\n                <li>메인화면</li>\r\n                <li>왜 현인재</li>\r\n                <li>과정 소개</li>\r\n                <li>강의영상</li>\r\n                <li>이벤트</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./header.scss\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            한국인재교육원\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./button.scss\";\r\n\r\nconst Button = ({ content, color }: { content: String, color?: String }) => {\r\n    return (\r\n        <div className=\"Button\" style={color && { backgroundColor: `${color}`}}>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\nexport default Button;","import React from \"react\";\r\nimport \"./halfButton.scss\";\r\n\r\nconst HalfButton = ({ content, color }: { content: String, color: String }) => {\r\n    return (\r\n        <div className=\"HalfButton\" style={{backgroundColor: `${color}`}}>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HalfButton;","import React from 'react';\r\nimport Footer from '../../components/footer';\r\nimport Header from '../../components/header';\r\nimport Button from '../../components/button';\r\nimport HalfButton from '../../components/halfButton';\r\nimport \"./main.scss\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div className=\"Main\">\r\n            <Header />\r\n            <div className=\"container\">\r\n                <Button content=\"왜 한국인재교육원일까?\" />\r\n                <div className=\"main-half\">\r\n                    <HalfButton content={`RTS 과정 소개 \\n 바로가기`} color=\"steelblue\" />\r\n                    <HalfButton content={`필라테스 과정 소개 \\n 바로가기`} color=\"pink\" />\r\n                </div>\r\n                <Button content=\"강의영상 바로가기\" />\r\n                <Button content=\"나에게 맞는 과정 찾기\" />\r\n                <div className=\"main-half\">\r\n                    <HalfButton content={`카카오톡으로 \\n 실시간 상담 받기`} color=\"orange\" />\r\n                    <HalfButton content={`02-3789-4400 \\n 지금 전화상담 받기`} color=\"green\" />\r\n                </div>\r\n                <Button content=\"PROMOTION & SEMINAR\" color=\"brown\" />\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/main';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}